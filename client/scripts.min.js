/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports) {

	var canvas =document.getElementById('myCan');
	
	var ctx = (canvas.getContext) ?
	           canvas.getContext('2d') :null;
	
	
	if(ctx){
	
	    ctx.fillStyle = '#28d1fa';
	    ctx.lineWidth = 17;
	    ctx.lineCap = 'round';
	    ctx.shadowBlur = 15;
	    ctx.shadowColor = '#28d1fa';
	
	    function degToRad(degree) {
	        var factor = Math.PI/180;
	        return degree*factor;
	    }
	
	
	
	        var data = [90, 100, 140];
	        var labels = ["90", "100", "140"];
	        var colors = ["#FFDAB9", "#E6E6FA", "#E0FFFF"];
	
	    function drawSegment(canvas, context, i) {
	        context.save();
	        var centerX = Math.floor(canvas.width / 2);
	        var centerY = Math.floor(canvas.height / 2);
	        radius = Math.floor(canvas.width / 3);
	
	        var startingAngle = degreesToRadians(sumTo(data, i));
	        var arcSize = degreesToRadians(data[i]);
	        var endingAngle = startingAngle + arcSize;
	
	        context.beginPath();
	        context.moveTo(centerX, centerY);
	        context.arc(centerX, centerY, radius,
	            startingAngle, endingAngle, false);
	        context.closePath();
	
	        context.fillStyle = colors[i];
	        context.fill();
	
	        context.restore();
	
	        drawSegmentLabel(canvas, context, i);
	    }
	
	    function degreesToRadians(degrees) {
	        return (degrees * Math.PI)/180;
	    }
	    function sumTo(a, i) {
	        var sum = 0;
	        for (var j = 0; j < i; j++) {
	            sum += a[j];
	        }
	        return sum;
	    }
	
	
	    function drawSegmentLabel(canvas, context, i) {
	        context.save();
	        var x = Math.floor(canvas.width / 2);
	        var y = Math.floor(canvas.height / 2);
	        var angle = degreesToRadians(sumTo(data, i));
	
	        context.translate(x, y);
	        context.rotate(angle);
	        var dx = Math.floor(canvas.width * 0.5) - 10;
	        var dy = Math.floor(canvas.height * 0.05);
	
	        context.textAlign = "right";
	        var fontSize = Math.floor(canvas.height / 25);
	        context.font = fontSize + "pt Helvetica";
	
	        context.fillText(labels[i], dx, dy);
	
	        context.restore();
	    }
	
	    for (var i = 0; i < data.length; i++) {
	        drawSegment(canvas, ctx, i);
	    }
	
	
	
	}
	console.log(ctx)

/***/ }
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAgYjMyZGM4M2M1YWFkYTcwYWViYjMiLCJ3ZWJwYWNrOi8vLy4vanMvc2NyaXB0cy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsdUJBQWU7QUFDZjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7Ozs7OztBQ3RDQTs7QUFFQTtBQUNBOzs7QUFHQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7O0FBSUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBdUIsT0FBTztBQUM5QjtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQSxvQkFBbUIsaUJBQWlCO0FBQ3BDO0FBQ0E7Ozs7QUFJQTtBQUNBLGlCIiwiZmlsZSI6InNjcmlwdHMubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pXG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG5cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGV4cG9ydHM6IHt9LFxuIFx0XHRcdGlkOiBtb2R1bGVJZCxcbiBcdFx0XHRsb2FkZWQ6IGZhbHNlXG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmxvYWRlZCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiB3ZWJwYWNrL2Jvb3RzdHJhcCBiMzJkYzgzYzVhYWRhNzBhZWJiM1xuICoqLyIsInZhciBjYW52YXMgPWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdteUNhbicpO1xyXG5cclxudmFyIGN0eCA9IChjYW52YXMuZ2V0Q29udGV4dCkgP1xyXG4gICAgICAgICAgIGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpIDpudWxsO1xyXG5cclxuXHJcbmlmKGN0eCl7XHJcblxyXG4gICAgY3R4LmZpbGxTdHlsZSA9ICcjMjhkMWZhJztcclxuICAgIGN0eC5saW5lV2lkdGggPSAxNztcclxuICAgIGN0eC5saW5lQ2FwID0gJ3JvdW5kJztcclxuICAgIGN0eC5zaGFkb3dCbHVyID0gMTU7XHJcbiAgICBjdHguc2hhZG93Q29sb3IgPSAnIzI4ZDFmYSc7XHJcblxyXG4gICAgZnVuY3Rpb24gZGVnVG9SYWQoZGVncmVlKSB7XHJcbiAgICAgICAgdmFyIGZhY3RvciA9IE1hdGguUEkvMTgwO1xyXG4gICAgICAgIHJldHVybiBkZWdyZWUqZmFjdG9yO1xyXG4gICAgfVxyXG5cclxuXHJcblxyXG4gICAgICAgIHZhciBkYXRhID0gWzkwLCAxMDAsIDE0MF07XHJcbiAgICAgICAgdmFyIGxhYmVscyA9IFtcIjkwXCIsIFwiMTAwXCIsIFwiMTQwXCJdO1xyXG4gICAgICAgIHZhciBjb2xvcnMgPSBbXCIjRkZEQUI5XCIsIFwiI0U2RTZGQVwiLCBcIiNFMEZGRkZcIl07XHJcblxyXG4gICAgZnVuY3Rpb24gZHJhd1NlZ21lbnQoY2FudmFzLCBjb250ZXh0LCBpKSB7XHJcbiAgICAgICAgY29udGV4dC5zYXZlKCk7XHJcbiAgICAgICAgdmFyIGNlbnRlclggPSBNYXRoLmZsb29yKGNhbnZhcy53aWR0aCAvIDIpO1xyXG4gICAgICAgIHZhciBjZW50ZXJZID0gTWF0aC5mbG9vcihjYW52YXMuaGVpZ2h0IC8gMik7XHJcbiAgICAgICAgcmFkaXVzID0gTWF0aC5mbG9vcihjYW52YXMud2lkdGggLyAzKTtcclxuXHJcbiAgICAgICAgdmFyIHN0YXJ0aW5nQW5nbGUgPSBkZWdyZWVzVG9SYWRpYW5zKHN1bVRvKGRhdGEsIGkpKTtcclxuICAgICAgICB2YXIgYXJjU2l6ZSA9IGRlZ3JlZXNUb1JhZGlhbnMoZGF0YVtpXSk7XHJcbiAgICAgICAgdmFyIGVuZGluZ0FuZ2xlID0gc3RhcnRpbmdBbmdsZSArIGFyY1NpemU7XHJcblxyXG4gICAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgY29udGV4dC5tb3ZlVG8oY2VudGVyWCwgY2VudGVyWSk7XHJcbiAgICAgICAgY29udGV4dC5hcmMoY2VudGVyWCwgY2VudGVyWSwgcmFkaXVzLFxyXG4gICAgICAgICAgICBzdGFydGluZ0FuZ2xlLCBlbmRpbmdBbmdsZSwgZmFsc2UpO1xyXG4gICAgICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XHJcblxyXG4gICAgICAgIGNvbnRleHQuZmlsbFN0eWxlID0gY29sb3JzW2ldO1xyXG4gICAgICAgIGNvbnRleHQuZmlsbCgpO1xyXG5cclxuICAgICAgICBjb250ZXh0LnJlc3RvcmUoKTtcclxuXHJcbiAgICAgICAgZHJhd1NlZ21lbnRMYWJlbChjYW52YXMsIGNvbnRleHQsIGkpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGRlZ3JlZXNUb1JhZGlhbnMoZGVncmVlcykge1xyXG4gICAgICAgIHJldHVybiAoZGVncmVlcyAqIE1hdGguUEkpLzE4MDtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHN1bVRvKGEsIGkpIHtcclxuICAgICAgICB2YXIgc3VtID0gMDtcclxuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGk7IGorKykge1xyXG4gICAgICAgICAgICBzdW0gKz0gYVtqXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHN1bTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgZnVuY3Rpb24gZHJhd1NlZ21lbnRMYWJlbChjYW52YXMsIGNvbnRleHQsIGkpIHtcclxuICAgICAgICBjb250ZXh0LnNhdmUoKTtcclxuICAgICAgICB2YXIgeCA9IE1hdGguZmxvb3IoY2FudmFzLndpZHRoIC8gMik7XHJcbiAgICAgICAgdmFyIHkgPSBNYXRoLmZsb29yKGNhbnZhcy5oZWlnaHQgLyAyKTtcclxuICAgICAgICB2YXIgYW5nbGUgPSBkZWdyZWVzVG9SYWRpYW5zKHN1bVRvKGRhdGEsIGkpKTtcclxuXHJcbiAgICAgICAgY29udGV4dC50cmFuc2xhdGUoeCwgeSk7XHJcbiAgICAgICAgY29udGV4dC5yb3RhdGUoYW5nbGUpO1xyXG4gICAgICAgIHZhciBkeCA9IE1hdGguZmxvb3IoY2FudmFzLndpZHRoICogMC41KSAtIDEwO1xyXG4gICAgICAgIHZhciBkeSA9IE1hdGguZmxvb3IoY2FudmFzLmhlaWdodCAqIDAuMDUpO1xyXG5cclxuICAgICAgICBjb250ZXh0LnRleHRBbGlnbiA9IFwicmlnaHRcIjtcclxuICAgICAgICB2YXIgZm9udFNpemUgPSBNYXRoLmZsb29yKGNhbnZhcy5oZWlnaHQgLyAyNSk7XHJcbiAgICAgICAgY29udGV4dC5mb250ID0gZm9udFNpemUgKyBcInB0IEhlbHZldGljYVwiO1xyXG5cclxuICAgICAgICBjb250ZXh0LmZpbGxUZXh0KGxhYmVsc1tpXSwgZHgsIGR5KTtcclxuXHJcbiAgICAgICAgY29udGV4dC5yZXN0b3JlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgZHJhd1NlZ21lbnQoY2FudmFzLCBjdHgsIGkpO1xyXG4gICAgfVxyXG5cclxuXHJcblxyXG59XHJcbmNvbnNvbGUubG9nKGN0eClcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vanMvc2NyaXB0cy5qc1xuICoqIG1vZHVsZSBpZCA9IDBcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=